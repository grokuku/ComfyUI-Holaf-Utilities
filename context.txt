--- START OF FILE context.txt ---

RÈGLES OPÉRATIONNELLES :

1.  **Gestion des fichiers manquants :** Si un fichier mentionné est nécessaire à ma compréhension ou à l'exécution d'une tâche mais n'a pas été fourni précédemment, ne l'invente jamais. Signale-moi qu'il est manquant et que tu as besoin que je te fournisse son contenu.

2.  **Format des modifications de fichiers :**
    *   Lorsqu'une modification est apportée à un fichier, fournis une commande `sed` pour Git Bash, **en une seule ligne**, permettant d'appliquer ce patch. (encapsuler l'argument de la commande sed dans des guillemets simples (') au lieu de guillemets doubles)
    *   **Condition :** Ne fournis cette commande `sed` que si elle est basique et ne risque pas de generer une erreur.
    *   Dans ce cas (commande `sed` sans risque), ne montre pas les blocs de code modifiés, donne uniquement la commande `sed`.
    *   **Restriction d'outil :** N'utilise que `sed` pour ces commandes de patch. N'utilise jamais d'autres outils (comme `patch`, `awk`, `tee`, etc.) pour générer la commande de modification.
    *   **Alternative :** Si la commande `sed` requise (en respectant la contrainte d'une seule ligne) risquerait de ne pas fonctionner correctement, ou si une commande `sed` en une seule ligne n'est pas réalisable pour la modification demandée, ne fournis pas de commande. À la place, donne-moi le contenu intégral du fichier modifié.

3.  **Flux de travail séquentiel :** Après avoir proposé une modification (commande `sed` ou fichier complet) pour un fichier, attends explicitement l'accord de l'utilisateur (et non du LLM) avant de proposer des modifications pour un fichier suivant ou de continuer sur une autre tâche.

4.  **Principe de moindre intervention :** Ne fais jamais de zèle. Ne modifie pas des sections de code qui fonctionnent correctement si cela n'est pas explicitement demandé ou absolument nécessaire pour la tâche en cours.

5.  **Anticipation des erreurs et suggestion de vérification :** N'assume pas que les modifications proposées fonctionneront parfaitement du premier coup. Après avoir proposé une modification, suggère brièvement les points clés que je devrais vérifier ou les tests simples que je pourrais effectuer pour m'assurer du bon fonctionnement.

6.  **Noms de fichiers :** Utilise toujours les chemins de fichiers complets (par exemple `js/image_viewer/image_viewer_gallery.js`) et ne les tronque jamais.

7.  **Fichiers complets :** Ne fournis jamais de fichiers partiels ou tronqués. Si une modification est nécessaire, donne toujours le contenu intégral du fichier modifié, même pour un seul caractère changé.

---
FILE_TREE_ANALYSIS:
# --- Root Directory ---
📁 holaf_image_viewer_backend/
  > Backend logic for the Image Viewer.
  📁 routes/
    > Modular API route handlers for the Image Viewer.
    📄 __init__.py
      > Empty. Placeholder.
    📄 edit_routes.py
      > Handles image editing operations (non-destructive).
      @ POST /holaf/images/save-edits
      @ GET /holaf/images/load-edits
      @ POST /holaf/images/delete-edits
      -> holaf_database, holaf_utils
    📄 export_routes.py
      > Prepares and serves image export packages.
      @ POST /holaf/images/prepare-export
      -> FE_PAYLOAD: {paths_canon:[str], export_format:str, include_meta:bool, meta_method:str}
      @ GET /holaf/images/export-chunk
      -> logic.py (for applying edits), holaf_utils
    📄 file_ops_routes.py
      > Handles file system operations (delete, restore).
      @ POST /holaf/images/delete
      @ POST /holaf/images/delete-permanently
      @ POST /holaf/images/restore
      @ POST /holaf/images/empty-trashcan
      -> logic.py, holaf_database
    📄 image_routes.py
      > [MODIFIED] Core image listing and filtering. Returns the *full* list of image metadata for a given filter, used by the frontend's virtualized scroller.
      @ GET /holaf/images/filter-options
      @ POST /holaf/images/list
      -> logic.py, holaf_database
    📄 metadata_routes.py
      > Handles metadata fetching, extraction, and injection.
      @ GET /holaf/images/metadata
      @ POST /holaf/images/extract-metadata
      @ POST /holaf/images/inject-metadata
      -> logic.py, holaf_database, holaf_utils
    📄 thumbnail_routes.py
      > [MODIFIED] Manages thumbnail lifecycle. Serves individual thumbnails (`/get_thumbnail_route`), regenerates them (`/regenerate_thumbnail_route`), and accepts non-blocking batch prioritization requests (`/prioritize_thumbnails_route`) via background tasks to pre-warm the cache.
      -> logic.py, holaf_database, holaf_utils
    📄 utility_routes.py
      > Misc utility routes for the viewer.
      @ POST /holaf/images/viewer-activity
      -> worker.py
  📄 __init__.py
    > Exposes BE functions and routes to the main `__init__.py`. An interface file.
    -> .logic, .routes.*, .worker
  📄 logic.py
    > Core image viewer logic (DB sync, metadata extraction, thumbnail creation). Includes `apply_edits_to_image`.
    -> holaf_database, holaf_utils
  📄 routes.py
    > [DEPRECATED] Kept for import safety, but logic is moved to `routes/` subdir.
  📄 worker.py
    > Background thread for thumbnail generation.
    -> logic, holaf_database, holaf_utils
📁 js/
  > Frontend assets.
  📁 css/
    > All CSS files for styling the utilities.
    📄 holaf_image_viewer_styles.css
      > Specific styles for the Image Viewer panel (placeholder).
    📄 holaf_image_viewer.css
      > [MODIFIED] Main stylesheet for the Image Viewer's internal layout (gallery, panes). Includes animation classes (`.entering`, `.exiting`), gallery layout styles, the `flex-grow: 0` fix for thumbnails, and styles for folder lock icons.
    📄 holaf_main_button.css
      > Styles for the main "Holaf's Utilities" button in the ComfyUI menu.
    📄 holaf_model_manager_styles.css
      > Styles for the Model Manager panel.
    📄 holaf_nodes_manager_styles.css
      > Styles for the Nodes Manager panel.
    📄 holaf_settings_panel_styles.css
      > Styles for the global Settings panel.
    📄 holaf_shared_panel.css
      > [MODIFIED] Core styles for ALL floating panels (drag, resize, header, close button, modals). Includes styles for keyboard-focused dialog items.
    📄 holaf_system_monitor_styles.css
      > Styles for the system monitor overlay.
    📄 holaf_terminal_styles.css
      > Styles for the Terminal panel (login/setup screens).
    📄 holaf_themes.css
      > [CRITICAL] Defines all themes via CSS variables. All other CSS files use these variables.
    📄 holaf_toasts.css
      > [NEW] Styles for the non-blocking toast notification system. Uses theme variables.
    📄 holaf_utilities.css
      > [DEPRECATED/MERGED] Old monolithic CSS. Now split into component files but might be referenced.
  📁 image_viewer/
    > Modular JS for the Image Viewer.
    📄 image_viewer_actions.js
      > [MODIFIED] Handles user actions (delete, export). Includes logic for the fully keyboard-navigable export dialog. -> image_viewer_state, HolafPanelManager
    📄 image_viewer_editor.js
      > [MODIFIED] Controller for the Image Editor sub-panel. Dispatches `holaf-refresh-thumbnail` event on save/reset. Applies preview filters. Subscribes to `imageViewerState`.
    📄 image_viewer_gallery.js
      > [MAJOR REFACTOR & FIXED] Implements a high-performance virtualized scroller. Renders only visible items into the DOM, allowing for instantaneous scrolling of massive galleries without UI freezes or flicker. Preserves scroll position on resize. Fixed navigation and focus logic.
    📄 image_viewer_infopane.js
      > [REFACTORED] Logic for the right-side info panel. Subscribes to and reads `activeImage` from central state.
    📄 image_viewer_navigation.js
      > [MAJOR REFACTOR & FIXED] Handles keyboard input (`handleKeyDown`). Blocks main shortcuts when a dialog is open. Applies editor filters to fullscreen/zoom views. Manages `ui.view_mode`. Corrected all navigation and focus logic for gallery, zoom, and fullscreen views.
    📄 image_viewer_settings.js
      > [REFACTORED] Manages load/save to/from central state and applies themes/panel settings. Maps between flat server config and structured state object.
    📄 image_viewer_state.js
      > [MODIFIED] Manages the central state for the Image Viewer (filters, selection, `ui.view_mode`, etc.) using a pub/sub model. Core of the new state-driven architecture. Includes per-folder lock state (`locked_folders`).
    📄 image_viewer_ui.js
      > [MODIFIED] Builds the main panel UI structure. Contains listeners for UI controls like thumbnail size/fit toggles. Subscribes to `imageViewerState`. Updated UI for Reset button position & folder actions (added Invert, per-folder SVG lock icons).
  📁 model_manager/
    > Modular JS for the Model Manager.
    📄 model_manager_actions.js -> holaf_panel_manager
    📄 model_manager_settings.js -> holaf_panel_manager
    📄 model_manager_ui.js -> holaf_panel_manager
    📄 model_manager_view.js -> holaf_panel_manager
  📄 chart.min.js
    > Chart.js library for the system monitor.
  📄 holaf_image_viewer.js
    > [MODIFIED] Main orchestrator. Pre-loads image data on startup for instant panel display. Initializes all modules and delegates gallery rendering to the virtualized scroller.
  📄 holaf_main.js
    > [CRITICAL] Main FE entry point.
    > § Creates top menu, loads all CSS assets (including `holaf_toasts.css`).
    > § Initializes and exposes `window.holaf.toastManager`.
    -> holaf_toast_manager, holaf_panel_manager, holaf_terminal, etc.
  📄 holaf_model_manager.js
    > Main controller for the Model Manager.
    -> holaf_panel_manager, model_manager/*
  📄 holaf_monitor.js
    > Controller for the System Monitor overlay.
    -> chart.min.js
  📄 holaf_nodes_manager.js
    > Controller for the Nodes Manager.
    -> holaf_panel_manager
  📄 holaf_panel_manager.js
    > [MODIFIED] Core FE utility. Creates draggable panels and modals. Exports `HOLAF_THEMES`. Now manages a global dialog state (`dialogState`) and keyboard navigation for generic dialogs.
  📄 holaf_settings_manager.js
    > Controller for the global Settings panel.
    -> holaf_panel_manager
  📄 holaf_toast_manager.js
    > [NEW & CRITICAL] Manages creation and lifecycle of toast notifications. Exposes global `window.holaf.toastManager`. Applies a default theme to its container to ensure readability.
  📄 holaf_terminal.js
    > Main controller for the Terminal.
    -> holaf_panel_manager, xterm.js, xterm-addon-fit.js
  📄 xterm-addon-fit.js
    > Add-on for xterm.js to resize the terminal.
  📄 xterm.js
    > Core library for the terminal emulation.
📁 nodes/
  > Custom nodes for ComfyUI, loaded by root `__init__.py`.
  📄 holaf_model_manager.py
    > BE logic for the Model Manager (scanning models, DB interaction, deep scan).
    -> holaf_database
  📄 holaf_nodes_manager.py
    > BE logic for the Nodes Manager (scanning node folders, git actions, README fetching).
📄 __init__.py
  > [CRITICAL] Main extension entry point.
  > § Imports all BE modules.
  > § Initializes DB, Config.
  > § Registers all API routes (@), including critical UI state saving endpoints like `/holaf/image-viewer/save-settings`.
  > § Patches ComfyUI's `SaveImage` node for live updates.
  > § Starts background worker threads (thumbnailing, DB sync).
  > § Dynamically loads custom nodes from the `nodes/` directory.
📄 __main__.py
  > Standalone utility script to generate a password hash for `config.ini`. Not used by the running server.
📄 deepscan.txt
  > Documentation/plan for the "Deep Scan" feature. Not code.
📄 holaf_config.py
  > Manages `config.ini` file. Reads/writes settings, including complex ones like filter arrays as JSON strings.
📄 holaf_database.py
  > [MODIFIED] Manages the SQLite database. Implements a robust version check (now v6) and migration system. On startup, it verifies the DB schema version, adding new performance indexes (mtime, subfolder, format) as needed.
📄 holaf_server_management.py
  > Handles server restart logic.
📄 holaf_system_monitor.py
  > BE for the System Monitor. Gets system stats (psutil, nvidia-smi) and serves them via WebSocket (WS).
📄 holaf_terminal.py
  > BE for the Terminal. Handles password auth and WebSocket (WS) PTY sessions.
📄 holaf_utils.py
  > Shared Python utility functions (sanitization, file chunking, temp dirs).
📄 model_types.json
  > Configuration file defining known model types, their folders, and formats. Used by `holaf_model_manager.py`.
📄 README.md
  > Main project documentation and security warning.
📄 requirements.txt
  > Python package dependencies (`psutil`, `pywinpty`, `aiofiles`).

---
PROJECT_STATE:
  ACTIVE_BUGS:
    - [bug, navigation, fullscreen_arrow_nav_mismatch] # Using arrow keys in fullscreen view navigates to incorrect images in the list instead of the immediate next/previous one.
    - [bug, navigation, enter_key_goes_to_fullscreen_instead_of_edit] # In keyboard navigation, pressing 'Enter' opens the fullscreen view instead of the edit/zoom view.
  IN_PROGRESS:
    # (None currently identified)
  ROADMAP:
    Global:
      - [new_tool, session_log_tool] # Add a new panel to log user and system actions.
      - [backend, periodic_maintenance_worker] # Hourly worker to clean DB and cache.
    ImageViewer:
      - [feature, ui, gallery_sorting_options] # Implement gallery sorting controls (by name, by date) in both ascending and descending order.
      - [investigation, state, folder_filter_persistence] # Double-check that folder selection state is robustly saved and restored across full application reboots.
      - [tuning, performance, thumbnail_concurrency] # Evaluate the optimal number of simultaneous thumbnail downloads; consider a slight increase from the current 12.
      - [feature, realtime_file_monitoring] # Replace periodic scan with `watchdog` for instant updates.
      - [feature, corrupted_file_management] # Auto-move unreadable images to `output/corrupted`.
      - [feature, implement_slideshow] # Implement a slideshow mode.
    ImageEditor:
      - [feature, ui, editor_operations_tab(toggle_preview,copy_paste)] # Implement the "Operations" tab with toggle preview and copy/paste settings.
      - [feature, feature_crop_expand(canvas,Pillow_backend)]
      - [feature, feature_white_balance_rgb(canvas,Pillow_backend)]
      - [feature, feature_vignette(css,Pillow_backend)]
      - [feature, feature_watermark_overlay]
  COMPLETED_FEATURES:
    - [fix, navigation, zoom_return_scroll_jump] # Returning to gallery after navigating in zoom/edit view now intelligently scrolls (smoothly) to focus on the active image, respecting its position relative to the viewport.
    - [fix, performance, gallery_scroll_optimization] # Optimized thumbnail loading to use a debounced, targeted approach, eliminating request storms on fast scrolls.
    - [fix, ui, gallery_autofill_layout] # Adjusted thumbnail sizing to dynamically fill the entire gallery width, removing empty space.
    - [fix, performance, initial_load_speed] # Corrected logic to properly utilize pre-loaded data, making the initial panel opening near-instantaneous.
    - [feature, ui, dual_scroll_loading_strategy] # Implemented a smarter thumbnail loading strategy: immediate for mouse wheel, debounced for scrollbar dragging.
    - [major_refactor, performance, gallery_virtualization] # Replaced gallery rendering with a high-performance virtualized scroller. This fixes UI freezes with large datasets, provides an instant-response scrollbar, eliminates flicker on scroll, preserves scroll position on resize, and pre-loads data on startup for an instant-on experience. Includes backend and database index optimizations.
    - [feature, backend, db_versioning_and_migration] # Implemented a robust database version check and migration system. On startup, it verifies the DB schema version. If outdated, it safely backs up the old DB, creates a new one with the latest schema, and transfers all compatible data.
    - [fix, performance, gallery_scalability] # Optimized thumbnail loading for massive galleries.
    - [feature, ui, export_dialog_advanced_nav] # Amélioration de la boîte de dialogue d'exportation avec une navigation 2D complète au clavier (boutons radio, cases à cocher).
    - [feature, ui, dialog_keyboard_navigation] # Implémentation de la navigation au clavier (flèches, Entrée/Espace) pour tous les boutons des boîtes de dialogue.
    - [fix, ui, focus_steal_on_controls] # Correction du bug où un clic sur un contrôle de l'interface (slider, case à cocher) bloquait les raccourcis clavier de la galerie.
    - [fix, ui, dialog_z_index_fullscreen] # Correction du z-index des boîtes de dialogue pour qu'elles apparaissent toujours au-dessus de la vue plein écran.
    - [feature, ui, export_unsaved_changes_dialog] # Affiche un dialogue de confirmation pour sauvegarder les modifications avant d'exporter.
    - [fix, ui, search_scope_buttons_unresponsive] # Correction des boutons de portée de recherche (Name/Prompt/Workflow) qui ne répondaient plus au clic lorsqu'il y avait du texte dans la barre de recherche.
    - [fix, ui, editor_visibility_on_click] # Correction du bug qui affichait l'éditeur d'image un clic sur deux depuis la galerie.
    - [fix, ui, filter_label_cleanup] # Suppression du titre redondant "Filters" pour une interface plus épurée.
    - [fix, ui, scope_buttons_responsive] # Correction des boutons de portée de recherche pour qu'ils rafraîchissent toujours la galerie et mettent à jour leur état visuel.
    - [fix, state, folder_lock_persistence] # L'état de verrouillage des dossiers est maintenant sauvegardé et restauré après un redémarrage.
    - [fix, ui, editor_previews_on_fullscreen_stale] # Correction des aperçus de l'éditeur en direct en vue plein écran/zoom pour qu'ils affichent toujours les effets de l'image active.
    - [feature, ui, folder_filter_enhancements] # Added folder filter enhancements: "Invert" action, per-folder SVG lock icons, and an advanced reset dialog that respects locked folders' state.
    - [fix, ui, gallery_last_row_justification] # Corrected CSS for the last row of thumbnails to prevent stretching.
    - [fix, ui, thumbnail_fit_toggle_immediate_update] # The "Contained" thumbnail view option now applies instantly.
    - [feature, ui, spacebar_to_toggle_selection_in_gallery] # Pressing spacebar on an active thumbnail now toggles its selection state.
    - [fix, ui, actions_target_active_image_in_zoom_view] # Toolbar actions (Delete, Export, etc.) now correctly target the active image in zoom/fullscreen view.
    - [fix, ui, editor_previews_in_fullscreen] # Live edit previews are now correctly applied to the image in fullscreen mode.
    - [fix, ui, thumbnail_refresh_on_edit_save] # Thumbnail in gallery now updates instantly after an edit is saved, using an event-driven approach.
    - [refactor, ui, gallery_differential_rendering] # Replaced full gallery redraws with a non-blocking, differential rendering engine for fluid filter changes.
    - [fix, ui, filter_race_condition] # Implemented a non-blocking request queue (`isLoading`/`isDirty`) to handle rapid filter changes without losing state.
    - [fix, ui, gallery_selection_bug] # Corrected a bug where clicking a thumbnail selected the wrong image after a filter change.
    - [fix, ui, filter_persistence_partial] # Text search and date range filters now correctly restore their state when the panel is reopened.
    - [feature, ui, gallery_empty_on_no_folder_selection] # The gallery now displays no images when no folders are selected, for a more intuitive UX.
    - [feature, ui, editor_save_cancel_and_unsaved_warning] # Implemented Save/Cancel buttons and a warning dialog for unsaved changes during navigation.
    - [feature, backend, thumbnail_regeneration_with_edits] # Implemented backend logic to regenerate thumbnails with edits applied after Save/Reset actions.
    - [feature, state_driven_architecture] # Major refactor to a state-driven FE architecture.
    - [refactor, fix, image_viewer_editor_and_navigation_state] # Decoupled the Editor and Navigation modules from the main controller.
    - [refactor, image_viewer_infopane_state_driven] # Refactored the info pane to subscribe to the central state.
    - [fix, image_viewer_selection_and_state_bug] # Rebuilt gallery selection logic to be fully state-driven and fixed a critical bug in the state manager.
    - [fix, image_viewer_filter_persistence_full] # Corrected BE save/load logic for all filters and fixed FE data parsing.
    - [fix, toast_theming_and_readability] # Corrected toast manager to apply a theme directly.
    - [feature, ui, toasts_notification_system_base] # Initial implementation of the non-blocking toast system.
    - [major_refactor_backend_frontend]
    - [image_editor_base_architecture]
    - [image_viewer_trashcan]
    - [image_viewer_metadata_tools]
    - [image_editor_initial_bugfixes]
    - [thumbnail_cache_system]
    - [fix, export_workflow_save_fails] # Corrected FE/BE data mismatch and added fallback logic.
    - [feature, ui, image_viewer_reset_filters_button] # Added a button to reset all filters to default.
    - [fix, ui, thumbnail_size_realtime_update] # Thumbnail size slider now updates gallery size instantly.